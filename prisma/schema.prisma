// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  password   String
  vehicles   Vehicle[]
  appointments Appointment[]
}

model Mechanic {
  id         Int      @id @default(autoincrement())
  name       String
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  workshopId Int
  repair Repair[]
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  make       String
  model      String
  year       Int
  owner   Client @relation(fields: [ownerId], references: [id])
  ownerId      Int
  appointments Appointment[]
  repairs Repairs[]

}

model Workshop {
  id         Int        @id @default(autoincrement())
  name       String
  location   String
  speciality String
  owner      String
  rating     Int
  mechanics  Mechanic[]
  appointments Appointment[]

}

model Appointment{
  id         Int        @id @default(autoincrement())
  date       DateTime?
  //Relacion Vehiculo
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  //Relacion Cliente
  client Client @relation(fields: [clientId], references: [id])
  clientId Int
  //Relacion Taller
  workshop Workshop @relation(fields: [workshopId], references: [id])
  workshopId Int
  status     String
  appointmentDetail AppointmentDetail?
  repairs Repairs[]
  invoice Invoice?


  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model AppointmentDetail {
  id           Int      @id @default(autoincrement())
  appointment  Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int @unique // Relacion 1 a 1, es necesario ponerle @unique
  status       String @default("Pending")
  description  String
  appointmentmedia Appointmentmedia[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointmentmedia{
  id Int @default(autoincrement())
  appointmentDetail  AppointmentDetail @relation(fields: [appointmentDetailId], references: [id])
  appointmentDetailId Int
  mediaUrl String
}

model Repairs{
  id Int @default(autoincrement())
  appointment  Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int 
  manager  Mechanic @relation(fields: [managerId], references: [id])
  managerId Int
  diagnosis String
  repairStatus String @default("Pending")
  ApprovedByCliente Boolean
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  repairsDetail RepairDetails?
  
}

model RepairDetails{
  id Int @default(autoincrement())
  repair Repairs @relation(fields: [repairId], references: [id])
  repairId Int @unique 
  description String
  cost Int
  invoiceDetail InvoiceDetail?

}

model InvoiceDetail{
  id Int @default(autoincrement())
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int @unique
  repairDetail RepairDetails @relation(fields: [repairDetailId], references: [id])
  repairDetailId Int
}
model Invoice {
  id Int @default(autoincrement())
  appintment Appointment @relation(fields: [idAppointment], references: [id])
  idAppointment Int
  total Int
  status String @default("Pending")
}